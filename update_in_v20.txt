$ diff mychat-pyqt6-v20.py mychat-pyqt6-v19.py
1236,1237c1236,1237
<     def _show_file_preview(self, file_path):
<         """Show preview of the attached file based on file type"""
---
>         def _show_file_preview(self, file_path):
>         """Show preview of the attached file based on file type, enhanced for text, Excel"""
1241c1241
<         elif file_path.lower().endswith('.txt'): # Text file preview - RESTORED
---
>         elif file_path.lower().endswith('.txt'): # Text file preview
1267,1271d1266
<         elif file_path.lower().endswith(('.docx', '.doc', '.xlsx', '.xls', '.csv')): # Office docs preview - filename and type
<             file_name = os.path.basename(file_path)
<             self.preview_label.setText(f"ðŸ“Ž {file_name} (Document attached)") # Generic document message
<             self.preview_label.setStyleSheet("border: none; background-color: transparent;") # Adjust style for text preview
<             self.preview_label.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop) # Left-align text
1273d1267
<             file_name = os.path.basename(file_path)
1276a1271,1274
>         elif file_path.lower().endswith(('.docx', '.doc')): # Word docs preview - filename and type
>             self.preview_label.setText(f"ðŸ“Ž {file_name} (Word document attached)") # Generic document message
>             self.preview_label.setStyleSheet("border: none; background-color: transparent;") # Adjust style for text preview
>             self.preview_label.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop) # Left-align text
1281c1279
<             self.preview_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
---
>             self.preview_label.setAlignment(Qt.AlignmentFlag.AlignCenter) # Center align text
1341c1339
<         """Process Word documents (docx, doc) to extract text content"""
---
>         """Process Word documents (now as a method)"""
1350a1349,1351
>             elif file_path.lower().endswith(('.xlsx', '.xls', '.csv')): # Handle Excel documents - NOTE: This part seems redundant here, as Excel is handled in process_excel
>                 df = pd.read_excel(file_path) if file_path.lower().endswith(('.xlsx', '.xls')) else pd.read_csv(file_path) # Read excel or csv into DataFrame
>                 text = df.to_markdown(index=False) # Convert DataFrame to markdown table # NOTE: also redundant here
